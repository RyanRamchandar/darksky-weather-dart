// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// Generator: JsonGenerator
// Target: library darksky_weather
// **************************************************************************

// Generated by owl 0.2.1
// https://github.com/agilord/owl

// ignore: unused_import, library_prefixes
import 'darksky_weather_io.dart';
// ignore: unused_import, library_prefixes
import 'dart:convert';
// ignore: unused_import, library_prefixes
import 'package:owl/util/json/core.dart' as _owl_json;

// **************************************************************************
// Generator: JsonGenerator
// Target: class Forecast
// **************************************************************************

/// Mapper for Forecast
abstract class ForecastMapper {
  /// Converts an instance of Forecast to Map.
  static Map<String, dynamic> map(Forecast object) {
    if (object == null) return null;
    return (new _owl_json.MapBuilder(ordered: false)
          ..put('latitude', object.latitude)
          ..put('longitude', object.longitude)
          ..put('timezone', object.timezone)
          ..put('currently', CurrentlyDataPointMapper.map(object.currently))
          ..put('minutely', MinutelyDataBlockMapper.map(object.minutely))
          ..put('hourly', HourlyDataBlockMapper.map(object.hourly))
          ..put('daily', DailyDataBlockMapper.map(object.daily)))
        .toMap();
  }

  /// Converts a Map to an instance of Forecast.
  static Forecast parse(Map<String, dynamic> map) {
    if (map == null) return null;
    final Forecast object = new Forecast();
    object.latitude = map['latitude'];
    object.longitude = map['longitude'];
    object.timezone = map['timezone'];
    object.currently = CurrentlyDataPointMapper.parse(map['currently']);
    object.minutely = MinutelyDataBlockMapper.parse(map['minutely']);
    object.hourly = HourlyDataBlockMapper.parse(map['hourly']);
    object.daily = DailyDataBlockMapper.parse(map['daily']);
    return object;
  }

  /// Converts a JSON string to an instance of Forecast.
  static Forecast fromJson(String json) {
    if (json == null || json.isEmpty) return null;
    final Map<String, dynamic> map = JSON.decoder.convert(json);
    return parse(map);
  }

  /// Converts an instance of Forecast to JSON string.
  static String toJson(Forecast object) {
    if (object == null) return null;
    return JSON.encoder.convert(map(object));
  }
}

// **************************************************************************
// Generator: JsonGenerator
// Target: abstract class DataPointBase
// **************************************************************************

/// Mapper for DataPointBase
abstract class DataPointBaseMapper {
  /// Converts an instance of DataPointBase to Map.
  static Map<String, dynamic> map(DataPointBase object) {
    if (object == null) return null;
    return (new _owl_json.MapBuilder(ordered: false)
          ..put('cloudCover', object.cloudCover)
          ..put('dewPoint', object.dewPoint)
          ..put('humidity', object.humidity)
          ..put('icon', object.icon)
          ..put('ozone', object.ozone)
          ..put('precipIntensity', object.precipIntensity)
          ..put('precipProbability', object.precipProbability)
          ..put('precipType', object.precipType)
          ..put('pressure', object.pressure)
          ..put('summary', object.summary)
          ..put('time', object.time)
          ..put('visibility', object.visibility)
          ..put('windBearing', object.windBearing)
          ..put('windSpeed', object.windSpeed))
        .toMap();
  }

  /// Converts a Map to an instance of DataPointBase.
  static DataPointBase parse(Map<String, dynamic> map) {
    if (map == null) return null;
    final DataPointBase object = new DataPointBase();
    object.cloudCover = map['cloudCover'];
    object.dewPoint = map['dewPoint'];
    object.humidity = map['humidity'];
    object.icon = map['icon'];
    object.ozone = map['ozone'];
    object.precipIntensity = map['precipIntensity'];
    object.precipProbability = map['precipProbability'];
    object.precipType = map['precipType'];
    object.pressure = map['pressure'];
    object.summary = map['summary'];
    object.time = map['time'];
    object.visibility = map['visibility'];
    object.windBearing = map['windBearing'];
    object.windSpeed = map['windSpeed'];
    return object;
  }

  /// Converts a JSON string to an instance of DataPointBase.
  static DataPointBase fromJson(String json) {
    if (json == null || json.isEmpty) return null;
    final Map<String, dynamic> map = JSON.decoder.convert(json);
    return parse(map);
  }

  /// Converts an instance of DataPointBase to JSON string.
  static String toJson(DataPointBase object) {
    if (object == null) return null;
    return JSON.encoder.convert(map(object));
  }
}

// **************************************************************************
// Generator: JsonGenerator
// Target: class CurrentlyDataPoint
// **************************************************************************

/// Mapper for CurrentlyDataPoint
abstract class CurrentlyDataPointMapper {
  /// Converts an instance of CurrentlyDataPoint to Map.
  static Map<String, dynamic> map(CurrentlyDataPoint object) {
    if (object == null) return null;
    return (new _owl_json.MapBuilder(ordered: false)
          ..put('nearestStormBearing', object.nearestStormBearing)
          ..put('nearestStormDistance', object.nearestStormDistance)
          ..put('temperature', object.temperature)
          ..put('cloudCover', object.cloudCover)
          ..put('dewPoint', object.dewPoint)
          ..put('humidity', object.humidity)
          ..put('icon', object.icon)
          ..put('ozone', object.ozone)
          ..put('precipIntensity', object.precipIntensity)
          ..put('precipProbability', object.precipProbability)
          ..put('precipType', object.precipType)
          ..put('pressure', object.pressure)
          ..put('summary', object.summary)
          ..put('time', object.time)
          ..put('visibility', object.visibility)
          ..put('windBearing', object.windBearing)
          ..put('windSpeed', object.windSpeed))
        .toMap();
  }

  /// Converts a Map to an instance of CurrentlyDataPoint.
  static CurrentlyDataPoint parse(Map<String, dynamic> map) {
    if (map == null) return null;
    final CurrentlyDataPoint object = new CurrentlyDataPoint();
    object.nearestStormBearing = map['nearestStormBearing'];
    object.nearestStormDistance = map['nearestStormDistance'];
    object.temperature = map['temperature'];
    object.cloudCover = map['cloudCover'];
    object.dewPoint = map['dewPoint'];
    object.humidity = map['humidity'];
    object.icon = map['icon'];
    object.ozone = map['ozone'];
    object.precipIntensity = map['precipIntensity'];
    object.precipProbability = map['precipProbability'];
    object.precipType = map['precipType'];
    object.pressure = map['pressure'];
    object.summary = map['summary'];
    object.time = map['time'];
    object.visibility = map['visibility'];
    object.windBearing = map['windBearing'];
    object.windSpeed = map['windSpeed'];
    return object;
  }

  /// Converts a JSON string to an instance of CurrentlyDataPoint.
  static CurrentlyDataPoint fromJson(String json) {
    if (json == null || json.isEmpty) return null;
    final Map<String, dynamic> map = JSON.decoder.convert(json);
    return parse(map);
  }

  /// Converts an instance of CurrentlyDataPoint to JSON string.
  static String toJson(CurrentlyDataPoint object) {
    if (object == null) return null;
    return JSON.encoder.convert(map(object));
  }
}

// **************************************************************************
// Generator: JsonGenerator
// Target: class MinutelyDataPoint
// **************************************************************************

/// Mapper for MinutelyDataPoint
abstract class MinutelyDataPointMapper {
  /// Converts an instance of MinutelyDataPoint to Map.
  static Map<String, dynamic> map(MinutelyDataPoint object) {
    if (object == null) return null;
    return (new _owl_json.MapBuilder(ordered: false)
          ..put('apparentTemperature', object.apparentTemperature)
          ..put('cloudCover', object.cloudCover)
          ..put('dewPoint', object.dewPoint)
          ..put('humidity', object.humidity)
          ..put('icon', object.icon)
          ..put('ozone', object.ozone)
          ..put('precipIntensity', object.precipIntensity)
          ..put('precipProbability', object.precipProbability)
          ..put('precipType', object.precipType)
          ..put('pressure', object.pressure)
          ..put('summary', object.summary)
          ..put('time', object.time)
          ..put('visibility', object.visibility)
          ..put('windBearing', object.windBearing)
          ..put('windSpeed', object.windSpeed))
        .toMap();
  }

  /// Converts a Map to an instance of MinutelyDataPoint.
  static MinutelyDataPoint parse(Map<String, dynamic> map) {
    if (map == null) return null;
    final MinutelyDataPoint object = new MinutelyDataPoint();
    object.apparentTemperature = map['apparentTemperature'];
    object.cloudCover = map['cloudCover'];
    object.dewPoint = map['dewPoint'];
    object.humidity = map['humidity'];
    object.icon = map['icon'];
    object.ozone = map['ozone'];
    object.precipIntensity = map['precipIntensity'];
    object.precipProbability = map['precipProbability'];
    object.precipType = map['precipType'];
    object.pressure = map['pressure'];
    object.summary = map['summary'];
    object.time = map['time'];
    object.visibility = map['visibility'];
    object.windBearing = map['windBearing'];
    object.windSpeed = map['windSpeed'];
    return object;
  }

  /// Converts a JSON string to an instance of MinutelyDataPoint.
  static MinutelyDataPoint fromJson(String json) {
    if (json == null || json.isEmpty) return null;
    final Map<String, dynamic> map = JSON.decoder.convert(json);
    return parse(map);
  }

  /// Converts an instance of MinutelyDataPoint to JSON string.
  static String toJson(MinutelyDataPoint object) {
    if (object == null) return null;
    return JSON.encoder.convert(map(object));
  }
}

// **************************************************************************
// Generator: JsonGenerator
// Target: class HourlyDataPoint
// **************************************************************************

/// Mapper for HourlyDataPoint
abstract class HourlyDataPointMapper {
  /// Converts an instance of HourlyDataPoint to Map.
  static Map<String, dynamic> map(HourlyDataPoint object) {
    if (object == null) return null;
    return (new _owl_json.MapBuilder(ordered: false)
          ..put('apparentTemperature', object.apparentTemperature)
          ..put('precipAccumulation', object.precipAccumulation)
          ..put('temperature', object.temperature)
          ..put('cloudCover', object.cloudCover)
          ..put('dewPoint', object.dewPoint)
          ..put('humidity', object.humidity)
          ..put('icon', object.icon)
          ..put('ozone', object.ozone)
          ..put('precipIntensity', object.precipIntensity)
          ..put('precipProbability', object.precipProbability)
          ..put('precipType', object.precipType)
          ..put('pressure', object.pressure)
          ..put('summary', object.summary)
          ..put('time', object.time)
          ..put('visibility', object.visibility)
          ..put('windBearing', object.windBearing)
          ..put('windSpeed', object.windSpeed))
        .toMap();
  }

  /// Converts a Map to an instance of HourlyDataPoint.
  static HourlyDataPoint parse(Map<String, dynamic> map) {
    if (map == null) return null;
    final HourlyDataPoint object = new HourlyDataPoint();
    object.apparentTemperature = map['apparentTemperature'];
    object.precipAccumulation = map['precipAccumulation'];
    object.temperature = map['temperature'];
    object.cloudCover = map['cloudCover'];
    object.dewPoint = map['dewPoint'];
    object.humidity = map['humidity'];
    object.icon = map['icon'];
    object.ozone = map['ozone'];
    object.precipIntensity = map['precipIntensity'];
    object.precipProbability = map['precipProbability'];
    object.precipType = map['precipType'];
    object.pressure = map['pressure'];
    object.summary = map['summary'];
    object.time = map['time'];
    object.visibility = map['visibility'];
    object.windBearing = map['windBearing'];
    object.windSpeed = map['windSpeed'];
    return object;
  }

  /// Converts a JSON string to an instance of HourlyDataPoint.
  static HourlyDataPoint fromJson(String json) {
    if (json == null || json.isEmpty) return null;
    final Map<String, dynamic> map = JSON.decoder.convert(json);
    return parse(map);
  }

  /// Converts an instance of HourlyDataPoint to JSON string.
  static String toJson(HourlyDataPoint object) {
    if (object == null) return null;
    return JSON.encoder.convert(map(object));
  }
}

// **************************************************************************
// Generator: JsonGenerator
// Target: class DailyDataPoint
// **************************************************************************

/// Mapper for DailyDataPoint
abstract class DailyDataPointMapper {
  /// Converts an instance of DailyDataPoint to Map.
  static Map<String, dynamic> map(DailyDataPoint object) {
    if (object == null) return null;
    return (new _owl_json.MapBuilder(ordered: false)
          ..put('apparentTemperatureMax', object.apparentTemperatureMax)
          ..put('apparentTemperatureMaxTime', object.apparentTemperatureMaxTime)
          ..put('apparentTemperatureMin', object.apparentTemperatureMin)
          ..put('apparentTemperatureMinTime', object.apparentTemperatureMinTime)
          ..put('moonPhase', object.moonPhase)
          ..put('precipAccumulation', object.precipAccumulation)
          ..put('precipIntensityMax', object.precipIntensityMax)
          ..put('precipIntensityMaxTime', object.precipIntensityMaxTime)
          ..put('sunriseTime', object.sunriseTime)
          ..put('sunsetTime', object.sunsetTime)
          ..put('temperature', object.temperature)
          ..put('temperatureMax', object.temperatureMax)
          ..put('temperatureMaxTime', object.temperatureMaxTime)
          ..put('temperatureMin', object.temperatureMin)
          ..put('temperatureMinTime', object.temperatureMinTime)
          ..put('cloudCover', object.cloudCover)
          ..put('dewPoint', object.dewPoint)
          ..put('humidity', object.humidity)
          ..put('icon', object.icon)
          ..put('ozone', object.ozone)
          ..put('precipIntensity', object.precipIntensity)
          ..put('precipProbability', object.precipProbability)
          ..put('precipType', object.precipType)
          ..put('pressure', object.pressure)
          ..put('summary', object.summary)
          ..put('time', object.time)
          ..put('visibility', object.visibility)
          ..put('windBearing', object.windBearing)
          ..put('windSpeed', object.windSpeed))
        .toMap();
  }

  /// Converts a Map to an instance of DailyDataPoint.
  static DailyDataPoint parse(Map<String, dynamic> map) {
    if (map == null) return null;
    final DailyDataPoint object = new DailyDataPoint();
    object.apparentTemperatureMax = map['apparentTemperatureMax'];
    object.apparentTemperatureMaxTime = map['apparentTemperatureMaxTime'];
    object.apparentTemperatureMin = map['apparentTemperatureMin'];
    object.apparentTemperatureMinTime = map['apparentTemperatureMinTime'];
    object.moonPhase = map['moonPhase'];
    object.precipAccumulation = map['precipAccumulation'];
    object.precipIntensityMax = map['precipIntensityMax'];
    object.precipIntensityMaxTime = map['precipIntensityMaxTime'];
    object.sunriseTime = map['sunriseTime'];
    object.sunsetTime = map['sunsetTime'];
    object.temperature = map['temperature'];
    object.temperatureMax = map['temperatureMax'];
    object.temperatureMaxTime = map['temperatureMaxTime'];
    object.temperatureMin = map['temperatureMin'];
    object.temperatureMinTime = map['temperatureMinTime'];
    object.cloudCover = map['cloudCover'];
    object.dewPoint = map['dewPoint'];
    object.humidity = map['humidity'];
    object.icon = map['icon'];
    object.ozone = map['ozone'];
    object.precipIntensity = map['precipIntensity'];
    object.precipProbability = map['precipProbability'];
    object.precipType = map['precipType'];
    object.pressure = map['pressure'];
    object.summary = map['summary'];
    object.time = map['time'];
    object.visibility = map['visibility'];
    object.windBearing = map['windBearing'];
    object.windSpeed = map['windSpeed'];
    return object;
  }

  /// Converts a JSON string to an instance of DailyDataPoint.
  static DailyDataPoint fromJson(String json) {
    if (json == null || json.isEmpty) return null;
    final Map<String, dynamic> map = JSON.decoder.convert(json);
    return parse(map);
  }

  /// Converts an instance of DailyDataPoint to JSON string.
  static String toJson(DailyDataPoint object) {
    if (object == null) return null;
    return JSON.encoder.convert(map(object));
  }
}

// **************************************************************************
// Generator: JsonGenerator
// Target: class MinutelyDataBlock
// **************************************************************************

/// Mapper for MinutelyDataBlock
abstract class MinutelyDataBlockMapper {
  /// Converts an instance of MinutelyDataBlock to Map.
  static Map<String, dynamic> map(MinutelyDataBlock object) {
    if (object == null) return null;
    return (new _owl_json.MapBuilder(ordered: false)
          ..put('data', object.data?.map(MinutelyDataPointMapper.map)?.toList())
          ..put('icon', object.icon)
          ..put('summary', object.summary))
        .toMap();
  }

  /// Converts a Map to an instance of MinutelyDataBlock.
  static MinutelyDataBlock parse(Map<String, dynamic> map) {
    if (map == null) return null;
    final MinutelyDataBlock object = new MinutelyDataBlock();
    // ignore: avoid_as
    object.data = (map['data'] as List<dynamic>)
        ?.map(MinutelyDataPointMapper.parse)
        ?.toList();
    object.icon = map['icon'];
    object.summary = map['summary'];
    return object;
  }

  /// Converts a JSON string to an instance of MinutelyDataBlock.
  static MinutelyDataBlock fromJson(String json) {
    if (json == null || json.isEmpty) return null;
    final Map<String, dynamic> map = JSON.decoder.convert(json);
    return parse(map);
  }

  /// Converts an instance of MinutelyDataBlock to JSON string.
  static String toJson(MinutelyDataBlock object) {
    if (object == null) return null;
    return JSON.encoder.convert(map(object));
  }
}

// **************************************************************************
// Generator: JsonGenerator
// Target: class HourlyDataBlock
// **************************************************************************

/// Mapper for HourlyDataBlock
abstract class HourlyDataBlockMapper {
  /// Converts an instance of HourlyDataBlock to Map.
  static Map<String, dynamic> map(HourlyDataBlock object) {
    if (object == null) return null;
    return (new _owl_json.MapBuilder(ordered: false)
          ..put('data', object.data?.map(HourlyDataPointMapper.map)?.toList())
          ..put('icon', object.icon)
          ..put('summary', object.summary))
        .toMap();
  }

  /// Converts a Map to an instance of HourlyDataBlock.
  static HourlyDataBlock parse(Map<String, dynamic> map) {
    if (map == null) return null;
    final HourlyDataBlock object = new HourlyDataBlock();
    // ignore: avoid_as
    object.data = (map['data'] as List<dynamic>)
        ?.map(HourlyDataPointMapper.parse)
        ?.toList();
    object.icon = map['icon'];
    object.summary = map['summary'];
    return object;
  }

  /// Converts a JSON string to an instance of HourlyDataBlock.
  static HourlyDataBlock fromJson(String json) {
    if (json == null || json.isEmpty) return null;
    final Map<String, dynamic> map = JSON.decoder.convert(json);
    return parse(map);
  }

  /// Converts an instance of HourlyDataBlock to JSON string.
  static String toJson(HourlyDataBlock object) {
    if (object == null) return null;
    return JSON.encoder.convert(map(object));
  }
}

// **************************************************************************
// Generator: JsonGenerator
// Target: class DailyDataBlock
// **************************************************************************

/// Mapper for DailyDataBlock
abstract class DailyDataBlockMapper {
  /// Converts an instance of DailyDataBlock to Map.
  static Map<String, dynamic> map(DailyDataBlock object) {
    if (object == null) return null;
    return (new _owl_json.MapBuilder(ordered: false)
          ..put('data', object.data?.map(DailyDataPointMapper.map)?.toList())
          ..put('icon', object.icon)
          ..put('summary', object.summary))
        .toMap();
  }

  /// Converts a Map to an instance of DailyDataBlock.
  static DailyDataBlock parse(Map<String, dynamic> map) {
    if (map == null) return null;
    final DailyDataBlock object = new DailyDataBlock();
    // ignore: avoid_as
    object.data = (map['data'] as List<dynamic>)
        ?.map(DailyDataPointMapper.parse)
        ?.toList();
    object.icon = map['icon'];
    object.summary = map['summary'];
    return object;
  }

  /// Converts a JSON string to an instance of DailyDataBlock.
  static DailyDataBlock fromJson(String json) {
    if (json == null || json.isEmpty) return null;
    final Map<String, dynamic> map = JSON.decoder.convert(json);
    return parse(map);
  }

  /// Converts an instance of DailyDataBlock to JSON string.
  static String toJson(DailyDataBlock object) {
    if (object == null) return null;
    return JSON.encoder.convert(map(object));
  }
}
